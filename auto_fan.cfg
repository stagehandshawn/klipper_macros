#used to set the fan if the chamber is above the desired temp
[gcode_macro SET_FAN_BY_TEMP_HIGHER]
gcode:

    {% set chamber = printer["temperature_sensor chamber_temp"] %}
    {% set FAN_TARGET = params.FAN_TARGET|default(55)|float %}
    {% set FAN_SPEED = params.FAN_SPEED|default(1)|float %}
    {% set FAN_NAME = params.FAN_NAME|default('exhaust_fan') %}


    {% if chamber.temperature >= FAN_TARGET %}
        SET_FAN_SPEED FAN={FAN_NAME} SPEED={FAN_SPEED} # Turn on fan if target is above or equal.
    {% else %}
        SET_FAN_SPEED FAN={FAN_NAME} SPEED=0 # Turn off fan if target is below bed_target
    {% endif %}

#used to set the fan if the chamber is below the desired temp
[gcode_macro SET_FAN_BY_TEMP_LOWER]
gcode:

    {% set chamber = printer["temperature_sensor chamber_temp"] %}
    {% set FAN_TARGET = params.FAN_TARGET|default(55)|float %}
    {% set FAN_SPEED = params.FAN_SPEED|default(1)|float %}
    {% set FAN_NAME = params.FAN_NAME|default('exhaust_fan') %}


    {% if chamber.temperature < FAN_TARGET %}
        SET_FAN_SPEED FAN={FAN_NAME} SPEED={FAN_SPEED} # Turn on fan if target is above or equal.
    {% else %}
        SET_FAN_SPEED FAN={FAN_NAME} SPEED=0 # Turn off fan if target is below bed_target
    {% endif %}



[delayed_gcode SET_AUTO_FAN_SPEEDS]
initial_duration: 30
gcode:




    {% set voron = printer['gcode_macro CUSTOM_VARIABLES'] %}

    {% set chamber = printer["temperature_sensor chamber_temp"] %}      # Get current chamber temp

    {% set filter_temp = voron.filter_set_temp %}                       # Get current set values from variable macro
    {% set filter_speed = voron.filter_set_speed %}
    
    {% set exhaust_temp = voron.exhaust_set_temp %}
    {% set exhaust_speed = voron.exhaust_set_speed %}

    {% set exhaust_enable = voron.exhaust_enable %}
    {% set filter_enable = voron.filter_enable %}
    {% set filter_heatup = voron.filter_heatup %}


                                            # check if fan is enabled, if so then check the chamber temp and set temp of fan and turn on if its over set temp


                                        # Filter fan Can be set to cool off or heat up chamber
    {% if filter_enable == True %}
        {% if filter_heatup == True %}      # if heatup is true then we want the filter(bed fan) to stay on until the chamber is higher than the target temp
            SET_FAN_BY_TEMP_LOWER FAN_TARGET={filter_temp} FAN_NAME=chamber_filter FAN_SPEED={filter_speed}
        {% else %}
            SET_FAN_BY_TEMP_HIGHER FAN_TARGET={filter_temp} FAN_NAME=chamber_filter FAN_SPEED={filter_speed} #if heatup is false then its probably the print end and we want the bed fan to stay on until the chamber is lower than our target
        {% endif %}
    {% else %}
        SET_FAN_BY_TEMP_HIGHER FAN_TARGET={filter_temp} FAN_NAME=chamber_filter FAN_SPEED=0         # if disabled then just set by the current temp with speed of 0, will always return with speed of 0
    {% endif %}

                                        # Exhaust Fan
    {% if exhaust_enable == True %}
        SET_FAN_BY_TEMP_HIGHER FAN_TARGET={exhaust_temp} FAN_NAME=exhaust_fan FAN_SPEED={exhaust_speed}     #always use higher (turns on if chamber is higher than target) here as the exhaust fan can only cool the chmaber off, not heat it up
    {% else %}
        SET_FAN_BY_TEMP_HIGHER FAN_TARGET={exhaust_temp} FAN_NAME=exhaust_fan FAN_SPEED=0
    {% endif %}


    UPDATE_DELAYED_GCODE ID=SET_AUTO_FAN_SPEEDS DURATION=30


[gcode_macro UPDATE_FAN_VARS]
gcode:

# Update all fan variables, ignoring vars not passed to macro    


## Filter Fan
  {% if params.FILTER_TEMP %}
    {% set F_TEMP = params.FILTER_TEMP|float %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=filter_set_temp VALUE={F_TEMP}  
  {% endif %}

  {% if params.FILTER_SPEED %}
    {% set F_SPEED = params.FILTER_SPEED|float %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=filter_set_speed VALUE={F_SPEED}
  {% endif %}

  {% if params.FILTER_ENABLE %}
    {% set F_ENABLE = params.FILTER_ENABLE %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=filter_enable VALUE={F_ENABLE}
  {% endif %}
    
  {% if params.FILTER_HEATUP %}
    {% set F_HEATUP = params.FILTER_HEATUP %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=filter_heatup VALUE={F_HEATUP}
  {% endif %}

## Exhuast fan
  {% if params.EXHAUST_TEMP %}
    {% set E_TEMP = params.EXHAUST_TEMP|float %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=exhaust_set_temp VALUE={E_TEMP}
  {% endif %}
    
  {% if params.EXHAUST_SPEED %}
    {% set E_SPEED = params.EXHAUST_SPEED|float %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=exhaust_set_speed VALUE={E_SPEED}
  {% endif %}

  {% if params.EXHAUST_ENABLE %}
    {% set E_ENABLE = params.EXHAUST_ENABLE %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=exhaust_enable VALUE={E_ENABLE}
  {% endif %}

  SET_AUTO_FANS_INSTANT
    


[gcode_macro CUSTOM_VARIABLES]

variable_exhaust_set_temp: 60
variable_exhaust_set_speed: 1

variable_filter_set_temp: 55
variable_filter_set_speed: 0.6
variable_filter_heatup: True

variable_exhaust_enable: False
variable_filter_enable: False

variable_part_fan_override: 0

variable_exhaust_after_complete: True

gcode:


[gcode_macro display_fan_vars]
gcode:

    {% set voron = printer['gcode_macro CUSTOM_VARIABLES'] %}

    {% set chamber = printer["temperature_sensor chamber_temp"] %}      # Get current chamber temp

    {% set F_TEMP = voron.filter_set_temp %}                       # Get current set values from variable macro
    {% set F_SPEED = voron.filter_set_speed %}
      {% set F_SPEED = F_SPEED * 100 %}

    {% set E_EXHAUST_AFTER = voron.exhaust_after_complete %}

    {% set E_TEMP = voron.exhaust_set_temp %}
    {% set E_SPEED = voron.exhaust_set_speed %}
      {% set E_SPEED = E_SPEED * 100 %}

    {% set E_ENABLE = voron.exhaust_enable %}
    {% set F_ENABLE = voron.filter_enable %}
    {% set F_HEATUP = voron.filter_heatup %}

    {% if F_ENABLE != False %}
      RESPOND PREFIX=Filter_Fan: MSG="Enabled - Temp: {F_TEMP} - Speed: {F_SPEED} - Heatup: {F_HEATUP}"
    {% else %}
      RESPOND PREFIX=Filter_Fan: MSG="Disabled - Temp: {F_TEMP} - Speed: {F_SPEED} - Heatup: {F_HEATUP}"
    {% endif %}


     {% if E_ENABLE != False %}
       RESPOND PREFIX=Exhaust_Fan: MSG="Enabled - Temp: {E_TEMP} - Speed: {E_SPEED} - Exhaust after: {E_EXHAUST_AFTER}"
     {% else %}
       RESPOND PREFIX=Exhaust_Fan: MSG="Disabled - Temp: {E_TEMP} - Speed: {E_SPEED} - Exhaust after: {E_EXHAUST_AFTER}"
     {% endif %}



[gcode_macro MANUAL_FAN_CONTROL]
gcode:
  UPDATE_DELAYED_GCODE ID=SET_AUTO_FAN_SPEEDS DURATION=0
  RESPOND PREFIX=FAN_CTL: MSG="Auto fan disabled, fans set to manual control"

[gcode_macro AUTO_FAN_CONTROL]
gcode:
  UPDATE_DELAYED_GCODE ID=SET_AUTO_FAN_SPEEDS DURATION=1
  RESPOND PREFIX=FAN_CTL: MSG="Fans set to AUTO control"
  RESPOND PREFIX=FAN_CTL: MSG="Don't forget to set Auto_Fan variables"

## SET THE FANS RIGHT AWAY ONCE
[gcode_macro SET_AUTO_FANS_INSTANT]
gcode:

    {% set voron = printer['gcode_macro CUSTOM_VARIABLES'] %}

    {% set chamber = printer["temperature_sensor chamber_temp"] %}      # Get current chamber temp

    {% set filter_temp = voron.filter_set_temp %}                       # Get current set values from variable macro
    {% set filter_speed = voron.filter_set_speed %}
    
    {% set exhaust_temp = voron.exhaust_set_temp %}
    {% set exhaust_speed = voron.exhaust_set_speed %}

    {% set exhaust_enable = voron.exhaust_enable %}
    {% set filter_enable = voron.filter_enable %}
    {% set filter_heatup = voron.filter_heatup %}


                                            # check if fan is enabled, if so then check the chamber temp and set temp of fan and turn on if its over set temp


                                        # Filter fan Can be set to cool of or heat up chamber
    {% if filter_enable == True %}
        {% if filter_heatup == True %}      # if heatup is true then we want the filter(bed fan) to stay on until the chamber is higher than the target temp
            SET_FAN_BY_TEMP_LOWER FAN_TARGET={filter_temp} FAN_NAME=chamber_filter FAN_SPEED={filter_speed}
        {% else %}
            SET_FAN_BY_TEMP_HIGHER FAN_TARGET={filter_temp} FAN_NAME=chamber_filter FAN_SPEED={filter_speed} #if heatup is false then its probably the print end and we want the bed fan to stay on until the chamber is lower than our target
        {% endif %}
    {% else %}
        SET_FAN_BY_TEMP_HIGHER FAN_TARGET={filter_temp} FAN_NAME=chamber_filter FAN_SPEED=0         # if disabled then just set by the current temp with speed of 0, will always return with speed of 0
    {% endif %}

                                        # Exhaust Fan
    {% if exhaust_enable == True %}
        SET_FAN_BY_TEMP_HIGHER FAN_TARGET={exhaust_temp} FAN_NAME=exhaust_fan FAN_SPEED={exhaust_speed}     #always use higher (turns on if chamber is higher than target) here as the exhaust fan can only cool the chmaber off, not heat it up
    {% else %}
        SET_FAN_BY_TEMP_HIGHER FAN_TARGET={exhaust_temp} FAN_NAME=exhaust_fan FAN_SPEED=0
    {% endif %}

[delayed_gcode PART_FAN_OVERRIDE]
gcode:

    {% set voron = printer['gcode_macro CUSTOM_VARIABLES'] %}
    {% set PF_OVERRIDE = voron.part_fan_override %}



    {% if PF_OVERRIDE > 255 %}
      {% set PF_OVERRIDE = 255 %}
    {% endif %}

    {% if PF_OVERRIDE > 0 %}

      {% if PF_OVERRIDE != printer.fan.speed %}
        M106 S{PF_OVERRIDE}
      {% endif %}

      UPDATE_DELAYED_GCODE ID=PART_FAN_OVERRIDE DURATION=5

    {% else %}
        UPDATE_DELAYED_GCODE ID=PART_FAN_OVERRIDE DURATION=0
    {% endif %}

[gcode_macro SET_PART_FAN_OVERRIDE]
gcode:
  {% if params.SPEED %}
    {% set FIRST_PF_SPEED = params.SPEED|int %}
    {% set PF_SPEED =  FIRST_PF_SPEED|int / 100 * 255 %}

    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=part_fan_override VALUE={PF_SPEED}  
    UPDATE_DELAYED_GCODE ID=PART_FAN_OVERRIDE DURATION=1
    RESPOND PREFIX=Fan_Override: MSG="Part Fan set to { PF_SPEED|string }"
  {% else %}
    SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=part_fan_override VALUE=0 
    UPDATE_DELAYED_GCODE ID=PART_FAN_OVERRIDE DURATION=1
  {% endif %}

[gcode_macro SET_EXHAUST_AFTER_COMPLETE]
gcode:
  {% set e_after = params.EXHAUST_AFTER|default('True') %}


  SET_GCODE_VARIABLE MACRO=CUSTOM_VARIABLES VARIABLE=exhaust_after_complete VALUE={e_after}
